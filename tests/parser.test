#!/bin/sh
set -e
cat <<EOF >input
algorithme procedure foo
int a, b
char c, d, e
bool f, g
debut
tant que (1 + 1) faire
  b <- 3
  c <- 4 + 4
fin tant que
faire
  b <- 3
  c <- 4 + 4
tantque (1 + 1)
pour u <- 3 jusqu'a quarante_deux faire
  a <- malloc(u)
fin pour
pour node <- a jusqu'a b decroissant faire
  c <- free(node)
fin pour
a <- 2 * 3
b <- 3 + 4 * 5
c <- vrai <> faux ou b
d <- f(2 + 2, b et c, foo)
e <- "bla"
f <- ^c
g <- e[a + 5]
fin algorithme procedure foo
EOF

valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./a2c input >out
cat <<EOF >exp
void foo(void)
{
int a, b;
char c, d, e;
bool f, g;
while ((1 + 1)) {
b = 3;
c = (4 + 4);
}
do {
b = 3;
c = (4 + 4);
} while ((1 + 1));
for (; u <= quarante_deux; ++(u)) {
a = malloc(u);
}
for (; node >= b; --(node)) {
c = free(node);
}
a = (2 * 3);
b = (3 + (4 * 5));
c = (1 <> (0 || b));
d = f((2 + 2), (b && c), foo);
e = "bla";
f = *c;
g = e[(a + 5)];
}
EOF

diff exp out
set +e
